export default client => {  return client.hoc({    state(props, store) {      return {        currentPage: store.get('currentPage') || 'home',        isMenuOpen: store.get('isMenuOpen'),      };    },    actions(props, store) {      return {        onClickMenu: () => store.toggle('isMenuOpen'),      };    },    styles: {      page: isSelected => `        position: absolute;        width: 100%;        transition: opacity .3s ease;        opacity: ${isSelected ? 1 : 0};        pointer-events: ${isSelected ? 'auto' : 'none'};      `,    },    classes: {      root: `        position: relative;      `,      scrollable: `        position: relative;        width: 100%;        height: 100vh;        overflow-x: hidden;        overflow-y: scroll;        -webkit-overflow-scrolling: touch;      `,    },    sections: {      Home: require('./pages/<Home>/Home.js'),      Agreements: require('./pages/<Agreements>/Agreements.js'),      Faq: require('./pages/<Faq>/Faq.js'),    },    render({ actions, state, styles, sections, classes }) {      const { onClickMenu } = actions;      const { currentPage, isMenuOpen } = state;      const { Home, Agreements, Faq } = sections;      return client.html`        <div id='wrapper' class=${classes.root}>          ${client.ui.components.MenuIcon({            isOpen: isMenuOpen,            onClick: onClickMenu,            color: 'white',            inStyle: 'left: 10px; top: 7px;',          })}          ${client.ui.fragments.Header()}          ${client.ui.fragments.Menu()}          <div class=${classes.scrollable}>            <div style=${styles.page(currentPage === 'home')}>${Home()}</div>            <div style=${styles.page(currentPage === 'agreements')}>${Agreements()}</div>            <div style=${styles.page(currentPage === 'faq')}>${Faq()}</div>          </div>        </div>      `;    }  });};