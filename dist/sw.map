{"version":3,"sources":["sw.js"],"names":["cacheName","cacheFiles","self","addEventListener","e","console","log","waitUntil","caches","open","then","cache","addAll","keys","cacheNames","Promise","all","map","itemChacheName","delete","url","request","indexOf","respondWith","fetch","match","response","requestClone","clone","fetchResponse","responseClone","put","catch","error"],"mappings":";AAGA,IAAMA,EAAY,KACZC,EAAa,CACjB,oBACA,wBACA,2DAGFC,KAAKC,iBAAiB,UAAW,SAAAC,GAC/BC,QAAQC,IAAI,kBACZF,EAAEG,UACAL,KAAKM,OAAOC,KAAKT,GAChBU,KAAK,SAAAC,GACGA,OAAAA,EAAMC,OAAOX,QAM1BC,KAAKC,iBAAiB,WAAY,SAAAC,GAEhCC,QAAQC,IAAI,kBACZF,EAAEG,UACAL,KAAKM,OAAOK,OACXH,KAAK,SAAAI,GACGC,OAAAA,QAAQC,IAAIF,EAAWG,IAAI,SAAAC,GAC5BA,GAAAA,IAAmBlB,EAEdE,OADPG,QAAQC,IAAI,mCAAoCY,GACzChB,KAAKM,OAAOW,OAAOD,WASpChB,KAAKC,iBAAiB,QAAS,SAAAC,GAEvBgB,IAAAA,EAAMhB,EAAEiB,QAAQD,IACtBf,QAAQC,IAAI,gBAAiBc,GAEXA,EAAIE,QAAQ,UAAY,EAExClB,EAAEmB,YAAYrB,KAAKsB,MAAMpB,EAAEiB,UAG3BjB,EAAEmB,YACArB,KAAKM,OAAOiB,MAAMrB,EAAEiB,SACnBX,KAAK,SAAAgB,GACAA,GAAAA,EAEKA,OADPrB,QAAQC,IAAI,sBAAuBc,GAC5BM,EAGHC,IAAAA,EAAevB,EAAEiB,QAAQO,QAE/B1B,KAAKsB,MAAMG,GACVjB,KAAK,SAAAmB,GACA,IAACA,EAEIA,OADPxB,QAAQC,IAAI,+BACLuB,EAEHC,IAAAA,EAAgBD,EAAcD,QACpC1B,KAAKM,OAAOC,KAAKT,GAChBU,KAAK,SAAAC,GAEGe,OADPf,EAAMoB,IAAI3B,EAAEiB,QAASS,GACdJ,MAGVM,MAAM,SAAAC,GACL5B,QAAQC,IAAI,kCAAmC2B","file":"sw.map","sourceRoot":"../public","sourcesContent":["\n/* global self */\n\nconst cacheName = 'v1';\nconst cacheFiles = [\n  './base-www/app.js',\n  './base-www/index.html',\n  'https://fonts.googleapis.com/css?family=Source+Sans+Pro',\n];\n\nself.addEventListener('install', e => {\n  console.log('[SW] Installed');\n  e.waitUntil(\n    self.caches.open(cacheName)\n    .then(cache => {\n      return cache.addAll(cacheFiles);\n    })\n  );\n\n});\n\nself.addEventListener('activate', e => {\n\n  console.log('[SW] Activated');\n  e.waitUntil(\n    self.caches.keys()\n    .then(cacheNames => {\n      return Promise.all(cacheNames.map(itemChacheName => {\n        if (itemChacheName !== cacheName) {\n          console.log('[SW] Removing cached files from ', itemChacheName);\n          return self.caches.delete(itemChacheName);\n        }\n      }));\n    })\n  );\n\n});\n\n\nself.addEventListener('fetch', e => {\n\n  const url = e.request.url;\n  console.log('[SW] Fetching', url);\n\n  const isApiCall = url.indexOf('/api/') >= 0;\n  if (isApiCall) {\n    e.respondWith(self.fetch(e.request));\n\n  } else {\n    e.respondWith(\n      self.caches.match(e.request)\n      .then(response => {\n        if (response) {\n          console.log('[SW] Found in cache', url);\n          return response;\n        }\n\n        const requestClone = e.request.clone();\n\n        self.fetch(requestClone)\n        .then(fetchResponse => {\n          if (!fetchResponse) {\n            console.log('[SW] No response from fetch');\n            return fetchResponse;\n          }\n          const responseClone = fetchResponse.clone();\n          self.caches.open(cacheName)\n          .then(cache => {\n            cache.put(e.request, responseClone);\n            return response;\n          });\n        })\n        .catch(error => {\n          console.log('[SW] Error Fetching && Catching', error);\n        });\n      })\n    );\n  }\n\n\n});\n\n"]}