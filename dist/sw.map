{"version":3,"sources":["log.js","onInstall.js","onActivate.js","getRequestType.js","onFetch.js","index.js"],"names":["FILLER_LENGTH","MAX_PAYLOAD_LENGTH","log","str","payload","filler","repeat","length","console","payloadStr","substr","onInstall","e","waitUntil","self","caches","open","cacheName","then","cache","addAll","cacheFiles","catch","err","onActivate","keys","cacheNames","Promise","all","map","itemChacheName","delete","urls","getRequestType","url","startsWith","indexOf","onFetch","request","requestType","response","responseClone","skipSW","includes","fetch","respondWith","match","resp","requestClone","clone","fetchResponse","put","error","addEventListener"],"mappings":"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","file":"sw.map","sourceRoot":"../../_root/public/sw","sourcesContent":["\nconst FILLER_LENGTH = 55;\nconst MAX_PAYLOAD_LENGTH = 40;\n\nexport function log(str, payload) {\n\n  const filler = '-'.repeat(FILLER_LENGTH - str.length);\n  if (!payload) return console.log(`[SW] ${filler}> ${str}`);\n\n  if (typeof payload !== 'string') return console.log(`[SW] ${filler}> ${str} `, payload);\n\n  if (payload.length < MAX_PAYLOAD_LENGTH) return console.log(`[SW] ${filler}> ${str} `, payload);\n\n  const payloadStr = payload.substr(payload.length - MAX_PAYLOAD_LENGTH, 1000);\n  return console.log(`[SW] ${filler}> ${str} `, payloadStr);\n\n}\n\n\n","\n/* global self */\nimport { log } from './log';\n\nexport function onInstall(e) {\n\n  log('Installed');\n  e.waitUntil(\n    self.caches.open(cacheName)\n    .then(cache => {\n      return cache.addAll(self.cacheFiles);\n    })\n    .catch(err => {\n      log('Install: Error', err);\n    })\n  );\n\n}\n","\n/* global self */\nimport { log } from './log';\n\nexport function onActivate(e) {\n\n  log('Activated');\n  e.waitUntil(\n    self.caches.keys()\n    .then(cacheNames => {\n      return Promise.all(cacheNames.map(itemChacheName => {\n        if (itemChacheName !== self.cacheName) {\n          log('Removing cached files from ', itemChacheName);\n          return self.caches.delete(itemChacheName);\n        }\n      }));\n    })\n    .catch(err => {\n      log('Activate: Error', err);\n    })\n  );\n\n}\n\n\n\n","\n\nconst urls = [ 'https://museeker.io', 'http://localhost' ];\n\nexport function getRequestType(url) {\n\n  const isSameOrigin = url.startsWith(urls[0]) || url.startsWith(urls[1]);\n  if (!isSameOrigin) return 'external';\n\n  const isApi = url.indexOf('/api/') >= 0;\n  if (isApi) return 'api';\n\n  const isBase = url.indexOf('/base-') >= 0;\n  if (isBase) return 'base';\n\n  const isImage = url.indexOf('/icons/') >= 0 || url.indexOf('/splash/') >= 0;\n  if (isImage) return 'image';\n\n  return 'page';\n\n}\n\n\n","\n/* global self */\nimport { log } from './log';\nimport { getRequestType } from './getRequestType';\n\nexport function onFetch(e) {\n\n  const url = e.request.url;\n  log('Fetching', url);\n\n  const requestType = getRequestType(url);\n  const skipSW = [ 'page', 'api' ].includes(requestType);\n  log('RequestType', requestType);\n\n  if (skipSW) {\n    return self.fetch(e.request)\n    .catch(err => {\n      log('SkipSW got an error', err);\n    });\n  }\n\n  let response;\n  let responseClone;\n\n  e.respondWith(\n    self.caches.match(e.request)\n    .then(resp => {\n      if (resp) {\n        log('Found in cache', url);\n        response = resp;\n        return response;\n      }\n\n      const requestClone = e.request.clone();\n\n      return self.fetch(requestClone);\n    })\n    .then(fetchResponse => {\n      if (!fetchResponse) {\n        log('No response from fetch');\n        return fetchResponse;\n      }\n      responseClone = fetchResponse.clone();\n      return self.caches.open(self.cacheName);\n    })\n    .then(cache => {\n      cache.put(e.request, responseClone);\n      return response;\n    })\n    .catch(error => {\n      log('Error Fetching && Catching', error);\n      return self.fetch(e.request);\n    })\n  );\n\n}\n\n\n","\n/* global self */\n\nimport { onInstall } from './onInstall';\nimport { onActivate } from './onActivate';\nimport { onFetch } from './onFetch';\n\nself.cacheName = 'v1';\nself.cacheFiles = [\n  './app.js',\n  './index.html',\n  'https://fonts.googleapis.com/css?family=Source+Sans+Pro',\n];\n\n\nself.addEventListener('install', onInstall);\nself.addEventListener('activate', onActivate);\nself.addEventListener('fetch', onFetch);\n\n"]}