{"version":3,"sources":["sw.js"],"names":["urls","cacheName","cacheFiles","getRequestType","url","startsWith","indexOf","log","str","payload","filler","repeat","length","console","self","addEventListener","e","waitUntil","caches","open","then","cache","addAll","catch","err","keys","cacheNames","Promise","all","map","itemChacheName","delete","request","requestType","fetchWithSW","includes","respondWith","match","response","requestClone","clone","fetch","fetchResponse","responseClone","put","error"],"mappings":";AAGA,IAAMA,EAAO,CAAE,sBAAuB,oBAChCC,EAAY,KACZC,EAAa,CACjB,WACA,eACA,2DAKF,SAASC,EAAeC,GAGlB,OADiBA,EAAIC,WAAWL,EAAK,KAAOI,EAAIC,WAAWL,EAAK,IAGtDI,EAAIE,QAAQ,UAAY,EACpB,MAEHF,EAAIE,QAAQ,WAAa,EACrB,OAEHF,EAAIE,QAAQ,YAAc,GAAKF,EAAIE,QAAQ,aAAe,EACtD,QAEb,OAXmB,WAiB5B,SAASC,EAAIC,EAAKC,GAEVC,IAAAA,EAAS,IAAIC,OAAO,GAAKH,EAAII,QAC/B,OAACH,EACEI,QAAQN,IAAYC,QAAAA,OAAAA,EAAOE,KAAAA,OAAAA,EAAYD,MAAAA,GADzBI,QAAQN,IAAYG,QAAAA,OAAAA,EAAWF,MAAAA,OAAAA,IAMtDM,KAAKC,iBAAiB,UAAW,SAAAC,GAC/BT,EAAI,aACJS,EAAEC,UACAH,KAAKI,OAAOC,KAAKlB,GAChBmB,KAAK,SAAAC,GACGA,OAAAA,EAAMC,OAAOpB,KAErBqB,MAAM,SAAAC,GACLjB,EAAI,iBAAkBiB,QAQ5BV,KAAKC,iBAAiB,WAAY,SAAAC,GAEhCT,EAAI,aACJS,EAAEC,UACAH,KAAKI,OAAOO,OACXL,KAAK,SAAAM,GACGC,OAAAA,QAAQC,IAAIF,EAAWG,IAAI,SAAAC,GAC5BA,GAAAA,IAAmB7B,EAEda,OADPP,EAAI,8BAA+BuB,GAC5BhB,KAAKI,OAAOa,OAAOD,QAI/BP,MAAM,SAAAC,GACLjB,EAAI,kBAAmBiB,QAQ7BV,KAAKC,iBAAiB,QAAS,SAAAC,GAEvBZ,IAAAA,EAAMY,EAAEgB,QAAQ5B,IACtBG,EAAI,WAAYH,GAEV6B,IAAAA,EAAc9B,EAAeC,GAC7B8B,GAAe,CAAE,OAAQ,OAAQC,SAASF,GAChD1B,EAAI,cAAe0B,GAEfC,GACFlB,EAAEoB,YACAtB,KAAKI,OAAOmB,MAAMrB,EAAEgB,SACnBZ,KAAK,SAAAkB,GACAA,GAAAA,EAEKA,OADP/B,EAAI,iBAAkBH,GACfkC,EAGHC,IAAAA,EAAevB,EAAEgB,QAAQQ,QAE/B1B,KAAK2B,MAAMF,GACVnB,KAAK,SAAAsB,GACA,IAACA,EAEIA,OADPnC,EAAI,0BACGmC,EAEHC,IAAAA,EAAgBD,EAAcF,QACpC1B,KAAKI,OAAOC,KAAKlB,GAChBmB,KAAK,SAAAC,GAEGiB,OADPjB,EAAMuB,IAAI5B,EAAEgB,QAASW,GACdL,MAGVf,MAAM,SAAAsB,GACLtC,EAAI,6BAA8BsC,OAGrCtB,MAAM,SAAAsB,GACLtC,EAAI,yBAA0BsC","file":"sw.map","sourceRoot":"../../_root/public","sourcesContent":["\n/* global self */\n\nconst urls = [ 'https://museeker.io', 'http://localhost' ];\nconst cacheName = 'v1';\nconst cacheFiles = [\n  './app.js',\n  './index.html',\n  'https://fonts.googleapis.com/css?family=Source+Sans+Pro',\n];\n\n/* --------------------------------------------------------------------------------------------- */\n\nfunction getRequestType(url) {\n\n  const isSameOrigin = url.startsWith(urls[0]) || url.startsWith(urls[1]);\n  if (!isSameOrigin) return 'external';\n\n  const isApi = url.indexOf('/api/') >= 0;\n  if (isApi) return 'api';\n\n  const isBase = url.indexOf('/base-') >= 0;\n  if (isBase) return 'base';\n\n  const isImage = url.indexOf('/icons/') >= 0 || url.indexOf('/splash/') >= 0;\n  if (isImage) return 'image';\n\n  return 'page';\n\n}\n\n/* --------------------------------------------------------------------------------------------- */\n\nfunction log(str, payload) {\n\n  const filler = '-'.repeat(60 - str.length);\n  if (!payload) return console.log(`[SW] ${filler}> ${str}`);\n  return console.log(`[SW] ${str} ${filler}> `, payload);\n}\n\n/* --------------------------------------------------------------------------------------------- */\n\nself.addEventListener('install', e => {\n  log('Installed');\n  e.waitUntil(\n    self.caches.open(cacheName)\n    .then(cache => {\n      return cache.addAll(cacheFiles);\n    })\n    .catch(err => {\n      log('Install: Error', err);\n    })\n  );\n\n});\n\n/* --------------------------------------------------------------------------------------------- */\n\nself.addEventListener('activate', e => {\n\n  log('Activated');\n  e.waitUntil(\n    self.caches.keys()\n    .then(cacheNames => {\n      return Promise.all(cacheNames.map(itemChacheName => {\n        if (itemChacheName !== cacheName) {\n          log('Removing cached files from ', itemChacheName);\n          return self.caches.delete(itemChacheName);\n        }\n      }));\n    })\n    .catch(err => {\n      log('Activate: Error', err);\n    })\n  );\n\n});\n\n/* --------------------------------------------------------------------------------------------- */\n\nself.addEventListener('fetch', e => {\n\n  const url = e.request.url;\n  log('Fetching', url);\n\n  const requestType = getRequestType(url);\n  const fetchWithSW = ![ 'page', 'api' ].includes(requestType);\n  log('RequestType', requestType);\n\n  if (fetchWithSW) {\n    e.respondWith(\n      self.caches.match(e.request)\n      .then(response => {\n        if (response) {\n          log('Found in cache', url);\n          return response;\n        }\n\n        const requestClone = e.request.clone();\n\n        self.fetch(requestClone)\n        .then(fetchResponse => {\n          if (!fetchResponse) {\n            log('No response from fetch');\n            return fetchResponse;\n          }\n          const responseClone = fetchResponse.clone();\n          self.caches.open(cacheName)\n          .then(cache => {\n            cache.put(e.request, responseClone);\n            return response;\n          });\n        })\n        .catch(error => {\n          log('Error Fetching && Catching', error);\n        });\n      })\n      .catch(error => {\n        log('Error Finding in cache', error);\n      })\n    );\n  }\n\n});\n\n"]}