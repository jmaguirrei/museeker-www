{"version":3,"sources":["sw.js"],"names":["urls","cacheName","cacheFiles","getRequestType","url","starsWith","indexOf","self","addEventListener","e","console","log","waitUntil","caches","open","then","cache","addAll","keys","cacheNames","Promise","all","map","itemChacheName","delete","request","requestType","includes","respondWith","fetch","match","response","requestClone","clone","fetchResponse","responseClone","put","catch","error"],"mappings":";AAGA,IAAMA,EAAO,CAAE,sBAAuB,oBAChCC,EAAY,KACZC,EAAa,CACjB,WACA,eACA,2DAKF,SAASC,EAAeC,GAGlB,OADiBA,EAAIC,UAAUL,EAAK,KAAOI,EAAIC,UAAUL,EAAK,IAGpDI,EAAIE,QAAQ,UAAY,EACpB,MAEHF,EAAIE,QAAQ,WAAa,EACrB,OAEHF,EAAIE,QAAQ,YAAc,GAAKF,EAAIE,QAAQ,aAAe,EACtD,QAEb,OAXmB,WAiB5BC,KAAKC,iBAAiB,UAAW,SAAAC,GAC/BC,QAAQC,IAAI,kBACZF,EAAEG,UACAL,KAAKM,OAAOC,KAAKb,GAChBc,KAAK,SAAAC,GACGA,OAAAA,EAAMC,OAAOf,QAQ1BK,KAAKC,iBAAiB,WAAY,SAAAC,GAEhCC,QAAQC,IAAI,kBACZF,EAAEG,UACAL,KAAKM,OAAOK,OACXH,KAAK,SAAAI,GACGC,OAAAA,QAAQC,IAAIF,EAAWG,IAAI,SAAAC,GAC5BA,GAAAA,IAAmBtB,EAEdM,OADPG,QAAQC,IAAI,mCAAoCY,GACzChB,KAAKM,OAAOW,OAAOD,WAUpChB,KAAKC,iBAAiB,QAAS,SAAAC,GAEvBL,IAAAA,EAAMK,EAAEgB,QAAQrB,IACtBM,QAAQC,IAAI,gBAAiBP,GAEvBsB,IAAAA,EAAcvB,EAAeC,GAE/B,CAAE,OAAQ,OAAQuB,SAASD,GAC7BjB,EAAEmB,YAAYrB,KAAKsB,MAAMpB,EAAEgB,UAE3BhB,EAAEmB,YACArB,KAAKM,OAAOiB,MAAMrB,EAAEgB,SACnBV,KAAK,SAAAgB,GACAA,GAAAA,EAEKA,OADPrB,QAAQC,IAAI,sBAAuBP,GAC5B2B,EAGHC,IAAAA,EAAevB,EAAEgB,QAAQQ,QAE/B1B,KAAKsB,MAAMG,GACVjB,KAAK,SAAAmB,GACA,IAACA,EAEIA,OADPxB,QAAQC,IAAI,+BACLuB,EAEHC,IAAAA,EAAgBD,EAAcD,QACpC1B,KAAKM,OAAOC,KAAKb,GAChBc,KAAK,SAAAC,GAEGe,OADPf,EAAMoB,IAAI3B,EAAEgB,QAASU,GACdJ,MAGVM,MAAM,SAAAC,GACL5B,QAAQC,IAAI,kCAAmC2B","file":"sw.map","sourceRoot":"../../_root/public","sourcesContent":["\n/* global self */\n\nconst urls = [ 'https://museeker.io', 'http://localhost' ];\nconst cacheName = 'v1';\nconst cacheFiles = [\n  './app.js',\n  './index.html',\n  'https://fonts.googleapis.com/css?family=Source+Sans+Pro',\n];\n\n/* --------------------------------------------------------------------------------------------- */\n\nfunction getRequestType(url) {\n\n  const isSameOrigin = url.starsWith(urls[0]) || url.starsWith(urls[1]);\n  if (!isSameOrigin) return 'external';\n\n  const isApi = url.indexOf('/api/') >= 0;\n  if (isApi) return 'api';\n\n  const isBase = url.indexOf('/base-') >= 0;\n  if (isBase) return 'base';\n\n  const isImage = url.indexOf('/icons/') >= 0 || url.indexOf('/splash/') >= 0;\n  if (isImage) return 'image';\n\n  return 'page';\n\n}\n\n/* --------------------------------------------------------------------------------------------- */\n\nself.addEventListener('install', e => {\n  console.log('[SW] Installed');\n  e.waitUntil(\n    self.caches.open(cacheName)\n    .then(cache => {\n      return cache.addAll(cacheFiles);\n    })\n  );\n\n});\n\n/* --------------------------------------------------------------------------------------------- */\n\nself.addEventListener('activate', e => {\n\n  console.log('[SW] Activated');\n  e.waitUntil(\n    self.caches.keys()\n    .then(cacheNames => {\n      return Promise.all(cacheNames.map(itemChacheName => {\n        if (itemChacheName !== cacheName) {\n          console.log('[SW] Removing cached files from ', itemChacheName);\n          return self.caches.delete(itemChacheName);\n        }\n      }));\n    })\n  );\n\n});\n\n/* --------------------------------------------------------------------------------------------- */\n\nself.addEventListener('fetch', e => {\n\n  const url = e.request.url;\n  console.log('[SW] Fetching', url);\n\n  const requestType = getRequestType(url);\n\n  if ([ 'page', 'api' ].includes(requestType)) {\n    e.respondWith(self.fetch(e.request));\n  } else {\n    e.respondWith(\n      self.caches.match(e.request)\n      .then(response => {\n        if (response) {\n          console.log('[SW] Found in cache', url);\n          return response;\n        }\n\n        const requestClone = e.request.clone();\n\n        self.fetch(requestClone)\n        .then(fetchResponse => {\n          if (!fetchResponse) {\n            console.log('[SW] No response from fetch');\n            return fetchResponse;\n          }\n          const responseClone = fetchResponse.clone();\n          self.caches.open(cacheName)\n          .then(cache => {\n            cache.put(e.request, responseClone);\n            return response;\n          });\n        })\n        .catch(error => {\n          console.log('[SW] Error Fetching && Catching', error);\n        });\n      })\n    );\n  }\n\n});\n\n"]}