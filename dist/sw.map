{"version":3,"sources":["sw.js"],"names":["urls","cacheName","cacheFiles","getRequestType","url","startsWith","indexOf","self","addEventListener","e","console","log","waitUntil","caches","open","then","cache","addAll","catch","err","keys","cacheNames","Promise","all","map","itemChacheName","delete","request","requestType","includes","respondWith","fetch","match","response","requestClone","clone","fetchResponse","responseClone","put","error"],"mappings":";AAGA,IAAMA,EAAO,CAAE,sBAAuB,oBAChCC,EAAY,KACZC,EAAa,CACjB,WACA,eACA,2DAKF,SAASC,EAAeC,GAGlB,OADiBA,EAAIC,WAAWL,EAAK,KAAOI,EAAIC,WAAWL,EAAK,IAGtDI,EAAIE,QAAQ,UAAY,EACpB,MAEHF,EAAIE,QAAQ,WAAa,EACrB,OAEHF,EAAIE,QAAQ,YAAc,GAAKF,EAAIE,QAAQ,aAAe,EACtD,QAEb,OAXmB,WAiB5BC,KAAKC,iBAAiB,UAAW,SAAAC,GAC/BC,QAAQC,IAAI,4DACZF,EAAEG,UACAL,KAAKM,OAAOC,KAAKb,GAChBc,KAAK,SAAAC,GACGA,OAAAA,EAAMC,OAAOf,KAErBgB,MAAM,SAAAC,GACLT,QAAQC,IAAI,iEAA+DQ,QAQjFZ,KAAKC,iBAAiB,WAAY,SAAAC,GAEhCC,QAAQC,IAAI,4DACZF,EAAEG,UACAL,KAAKM,OAAOO,OACXL,KAAK,SAAAM,GACGC,OAAAA,QAAQC,IAAIF,EAAWG,IAAI,SAAAC,GAC5BA,GAAAA,IAAmBxB,EAEdM,OADPG,QAAQC,IAAI,mCAAoCc,GACzClB,KAAKM,OAAOa,OAAOD,QAI/BP,MAAM,SAAAC,GACLT,QAAQC,IAAI,kEAAgEQ,QAQlFZ,KAAKC,iBAAiB,QAAS,SAAAC,GAEvBL,IAAAA,EAAMK,EAAEkB,QAAQvB,IACtBM,QAAQC,IAAI,0DAAwDP,GAE9DwB,IAAAA,EAAczB,EAAeC,GACnCM,QAAQC,IAAI,6DAA2DiB,GAEnE,CAAE,OAAQ,OAAQC,SAASD,GAC7BnB,EAAEqB,YACAvB,KAAKwB,MAAMtB,EAAEkB,UAGflB,EAAEqB,YACAvB,KAAKM,OAAOmB,MAAMvB,EAAEkB,SACnBZ,KAAK,SAAAkB,GACAA,GAAAA,EAEKA,OADPvB,QAAQC,IAAI,gEAA8DP,GACnE6B,EAGHC,IAAAA,EAAezB,EAAEkB,QAAQQ,QAE/B5B,KAAKwB,MAAMG,GACVnB,KAAK,SAAAqB,GACA,IAACA,EAEIA,OADP1B,QAAQC,IAAI,yEACLyB,EAEHC,IAAAA,EAAgBD,EAAcD,QACpC5B,KAAKM,OAAOC,KAAKb,GAChBc,KAAK,SAAAC,GAEGiB,OADPjB,EAAMsB,IAAI7B,EAAEkB,QAASU,GACdJ,MAGVf,MAAM,SAAAqB,GACL7B,QAAQC,IAAI,4EAA0E4B,OAGzFrB,MAAM,SAAAqB,GACL7B,QAAQC,IAAI,wEAAsE4B","file":"sw.map","sourceRoot":"../../_root/public","sourcesContent":["\n/* global self */\n\nconst urls = [ 'https://museeker.io', 'http://localhost' ];\nconst cacheName = 'v1';\nconst cacheFiles = [\n  './app.js',\n  './index.html',\n  'https://fonts.googleapis.com/css?family=Source+Sans+Pro',\n];\n\n/* --------------------------------------------------------------------------------------------- */\n\nfunction getRequestType(url) {\n\n  const isSameOrigin = url.startsWith(urls[0]) || url.startsWith(urls[1]);\n  if (!isSameOrigin) return 'external';\n\n  const isApi = url.indexOf('/api/') >= 0;\n  if (isApi) return 'api';\n\n  const isBase = url.indexOf('/base-') >= 0;\n  if (isBase) return 'base';\n\n  const isImage = url.indexOf('/icons/') >= 0 || url.indexOf('/splash/') >= 0;\n  if (isImage) return 'image';\n\n  return 'page';\n\n}\n\n/* --------------------------------------------------------------------------------------------- */\n\nself.addEventListener('install', e => {\n  console.log('[SW] -------------------------------------> Installed');\n  e.waitUntil(\n    self.caches.open(cacheName)\n    .then(cache => {\n      return cache.addAll(cacheFiles);\n    })\n    .catch(err => {\n      console.log('[SW] Install: Error -------------------------------------> ', err);\n    })\n  );\n\n});\n\n/* --------------------------------------------------------------------------------------------- */\n\nself.addEventListener('activate', e => {\n\n  console.log('[SW] -------------------------------------> Activated');\n  e.waitUntil(\n    self.caches.keys()\n    .then(cacheNames => {\n      return Promise.all(cacheNames.map(itemChacheName => {\n        if (itemChacheName !== cacheName) {\n          console.log('[SW] Removing cached files from ', itemChacheName);\n          return self.caches.delete(itemChacheName);\n        }\n      }));\n    })\n    .catch(err => {\n      console.log('[SW] Activate: Error -------------------------------------> ', err);\n    })\n  );\n\n});\n\n/* --------------------------------------------------------------------------------------------- */\n\nself.addEventListener('fetch', e => {\n\n  const url = e.request.url;\n  console.log('[SW] Fetching ------------------------------------->', url);\n\n  const requestType = getRequestType(url);\n  console.log('[SW] requestType ------------------------------------->', requestType);\n\n  if ([ 'page', 'api' ].includes(requestType)) {\n    e.respondWith(\n      self.fetch(e.request)\n    );\n  } else {\n    e.respondWith(\n      self.caches.match(e.request)\n      .then(response => {\n        if (response) {\n          console.log('[SW] Found in cache ------------------------------------->', url);\n          return response;\n        }\n\n        const requestClone = e.request.clone();\n\n        self.fetch(requestClone)\n        .then(fetchResponse => {\n          if (!fetchResponse) {\n            console.log('[SW] -------------------------------------> No response from fetch');\n            return fetchResponse;\n          }\n          const responseClone = fetchResponse.clone();\n          self.caches.open(cacheName)\n          .then(cache => {\n            cache.put(e.request, responseClone);\n            return response;\n          });\n        })\n        .catch(error => {\n          console.log('[SW] -------------------------------------> Error Fetching && Catching', error);\n        });\n      })\n      .catch(error => {\n        console.log('[SW] -------------------------------------> Error Finding in cache', error);\n      })\n    );\n  }\n\n});\n\n"]}