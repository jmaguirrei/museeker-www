{"version":3,"sources":["log.js","onInstall.js","onActivate.js","getRequestType.js","onFetch.js","index.js"],"names":["log","str","payload","filler","repeat","length","console","onInstall","e","waitUntil","self","caches","open","cacheName","then","cache","addAll","cacheFiles","catch","err","onActivate","keys","cacheNames","Promise","all","map","itemChacheName","delete","urls","getRequestType","url","startsWith","indexOf","onFetch","request","requestType","fetchWithSW","includes","respondWith","match","response","requestClone","clone","fetch","fetchResponse","responseClone","put","error","addEventListener"],"mappings":"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","file":"index.map","sourceRoot":"../../_root/public/sw","sourcesContent":["\n\nexport function log(str, payload) {\n\n  const filler = '-'.repeat(60 - str.length);\n  if (!payload) return console.log(`[SW] ${filler}> ${str}`);\n  return console.log(`[SW] ${str} ${filler}> `, payload);\n}\n\n\n","\n/* global self */\nimport { log } from './log';\n\nexport function onInstall(e) {\n\n  log('Installed');\n  e.waitUntil(\n    self.caches.open(cacheName)\n    .then(cache => {\n      return cache.addAll(self.cacheFiles);\n    })\n    .catch(err => {\n      log('Install: Error', err);\n    })\n  );\n\n}\n","\n/* global self */\nimport { log } from './log';\n\nexport function onActivate(e) {\n\n  log('Activated');\n  e.waitUntil(\n    self.caches.keys()\n    .then(cacheNames => {\n      return Promise.all(cacheNames.map(itemChacheName => {\n        if (itemChacheName !== self.cacheName) {\n          log('Removing cached files from ', itemChacheName);\n          return self.caches.delete(itemChacheName);\n        }\n      }));\n    })\n    .catch(err => {\n      log('Activate: Error', err);\n    })\n  );\n\n}\n\n\n\n","\n\nconst urls = [ 'https://museeker.io', 'http://localhost' ];\n\nexport function getRequestType(url) {\n\n  const isSameOrigin = url.startsWith(urls[0]) || url.startsWith(urls[1]);\n  if (!isSameOrigin) return 'external';\n\n  const isApi = url.indexOf('/api/') >= 0;\n  if (isApi) return 'api';\n\n  const isBase = url.indexOf('/base-') >= 0;\n  if (isBase) return 'base';\n\n  const isImage = url.indexOf('/icons/') >= 0 || url.indexOf('/splash/') >= 0;\n  if (isImage) return 'image';\n\n  return 'page';\n\n}\n\n\n","\n/* global self */\nimport { log } from './log';\nimport { getRequestType } from './getRequestType';\n\nexport function onFetch(e) {\n\n  const url = e.request.url;\n  log('Fetching', url);\n\n  const requestType = getRequestType(url);\n  const fetchWithSW = ![ 'page', 'api' ].includes(requestType);\n  log('RequestType', requestType);\n\n  if (fetchWithSW) {\n    e.respondWith(\n      self.caches.match(e.request)\n      .then(response => {\n        if (response) {\n          log('Found in cache', url);\n          return response;\n        }\n\n        const requestClone = e.request.clone();\n\n        self.fetch(requestClone)\n        .then(fetchResponse => {\n          if (!fetchResponse) {\n            log('No response from fetch');\n            return fetchResponse;\n          }\n          const responseClone = fetchResponse.clone();\n          self.caches.open(self.cacheName)\n          .then(cache => {\n            cache.put(e.request, responseClone);\n            return response;\n          });\n        })\n        .catch(error => {\n          log('Error Fetching && Catching', error);\n        });\n      })\n      .catch(error => {\n        log('Error Finding in cache', error);\n      })\n    );\n  }\n\n}\n\n\n","\n/* global self */\n\nimport { onInstall } from './onInstall';\nimport { onActivate } from './onActivate';\nimport { onFetch } from './onFetch';\n\nself.cacheName = 'v1';\nself.cacheFiles = [\n  './app.js',\n  './index.html',\n  'https://fonts.googleapis.com/css?family=Source+Sans+Pro',\n];\n\n\nself.addEventListener('install', onInstall);\nself.addEventListener('activate', onActivate);\nself.addEventListener('fetch', onFetch);\n\n"]}